module FFI
  class Struct
    type layout = Library::ffi_lib_type | singleton(StructLayout::Field) | Array[layout]

    def self.alignment: () -> Integer
    def self.auto_ptr: () -> Type::Mapped[ManagedStructConverter, __todo__, __todo__, __todo__]

    type ptr = Type::Mapped[StructByReference, __todo__, __todo__, __todo__]
    def self.ptr: (?:inout | :in | :out flags) -> ptr
    alias self.by_ref self.ptr
    def self.in: () -> ptr
    def self.out: () -> ptr
    def self.val: () -> StructByValue
    alias self.by_value self.val

    def self.layout: (*layout | Integer) -> StructLayout
              | (Hash[Symbol, layout]) -> StructLayout
    def self.members: () -> Array[Symbol]
    def self.offset_of: (Symbol name) -> Numeric
    def self.offsets: () -> Array[[Symbol, Numeric]]
    def self.size: -> Numeric
    def self.size=: [N < Numeric] (N size) -> N

    class ManagedStructConverter
      #TODO
    end
  end
end
